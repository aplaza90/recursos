version: '3'

services:
  shared_mysql:
    container_name: recursos-mysql
    image: mysql:9
    platform: linux/amd64
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
    entrypoint:
      sh -c "
        echo 'CREATE DATABASE IF NOT EXISTS platform;CREATE DATABASE IF NOT EXISTS backoffice;' > /docker-entrypoint-initdb.d/init.sql;
        /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      "
    command: ["--default-authentication-plugin=mysql_native_password"]

  shared_rabbitmq:
    container_name: recursos-rabbitmq
    image: 'rabbitmq:3.13-management'
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "5630:5672"
      - "8090:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=recursos
      - RABBITMQ_DEFAULT_PASS=recursos

  elasticsearch:
    container_name: recursos-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - "9300:9300"
      - "9200:9200"
    environment:
      - "ELASTIC_PASSWORD=recursos"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "discovery.type=single-node"
      - "TAKE_FILE_OWNERSHIP=1"

  platform_logstash:
    image: docker.elastic.co/logstash/logstash:7.5.0
    container_name: logstash
    environment:
      - "ELASTIC_PASSWORD=recursos"
    ports: [ '9600:9600' ]
    depends_on:
      - elasticsearch
    volumes:
      - './etc/logstash/pipeline:/usr/share/logstash/pipeline'
      - './var/log:/logs'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.0
    container_name: kibana
    environment:
      - "ELASTIC_PASSWORD=elastic"
    ports: [ '5601:5601' ]
    depends_on:
      - elasticsearch


  platform_backend_server_java:
    container_name: recursos_platform_backend_server
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8030:8030"
    volumes:
      - .:/app:delegated
      - platform_backend_gradle_cache:/app/.gradle
    depends_on:
      - shared_mysql
      - shared_rabbitmq
      - elasticsearch
    command: ["./gradlew", "bootRun", "--args", "platform_backend server"]

  test_server_java:
    container_name: recursos-test_server
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - .:/app:delegated
      - test_gradle_cache:/app/.gradle
    depends_on:
      - shared_mysql
      - shared_rabbitmq
      - elasticsearch
    tty: true

volumes:
  platform_backend_gradle_cache:
  test_gradle_cache:
